@page "/project/{ProjectId:int}/{ProjectSlug}"
@rendermode InteractiveServer

@using TCSA.V2.Components.UI.SVGs
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using static TCSA.V2.Helpers.Enums
@using System.Security.Claims;
@using TCSA.V2.Services

<div class="container">
    <div class="jumbotron jumbotron-fluid project-banner">
        <div class="container text-center align-content-center">
            <h1 class="page-title">@Project.Title</h1>
        </div>
    </div>
</div>

<div class="container project-container w-50">
    @if (IsCompleted)
    {
        <div class="card card-completed">
            <div class="card-body">
                @Project.LanguageHeadings.RoadmapStepCompleted
            </div>
        </div>
    }

    @if (IsPendingReview)
    {
        <div class="card card-pending">
            <div class="card-body">
                @Project.LanguageHeadings.PendingReview
            </div>
        </div>
    }

    @if (AvailableLanguages.Count > 1)
    {
        <div class="row pb-3">
            <div class="col">
                <label for="languageSelect">Select Language:</label>
                <select class="form-control" id="languageSelect" @onchange="ChangeLanguage">
                    >
                    @foreach (var language in AvailableLanguages)
                    {
                        <option value="@language">@language</option>
                    }
                </select>
            </div>
        </div>
    }

    @if (Project.Introduction != null)
    {
        <div class="row pb-5 mb-3 p-sm-2 intro-block">
            <div class="col">
                <h1 class="article-section-title">@Project.LanguageHeadings.Introduction</h1>
                @foreach (var paragraph in Project.Introduction)
                {
                    <p>@((MarkupString)(@paragraph.Body))</p>
                }
            </div>
        </div>
    }

    @if (Project.Id != 86)
    {
        <div class="row pb-5">
            <div class="col-lg-2 d-flex align-items-center justify-content-center">
                <div class="d-none d-sm-block">
                    <img src="img/icons8-checklist-512.png" width="70" alt="" class="align-middle">
                </div>
            </div>
            <div class=col-lg-10>

                <div class="col d-flex justify-content-center">
                    <h1 class="article-section-title">@Project.LanguageHeadings.Requirements</h1>
                </div>

                @if (!String.IsNullOrEmpty(Project.RequirementsIntro))
                {
                    <p><p>@((MarkupString)(Project.RequirementsIntro))</p></p>
                }

                @if (Project.Requirements != null)
                {
                    <ul class="list-group  list-group-flush">
                        @foreach (var requirement in Project.Requirements)
                        {
                            <li class="list-group-item">
                                <svg class="bi" width="24" height="24" fill="green">
                                    <use xlink:href="/bootstrap-icons/bootstrap-icons.svg#check-square" />
                                </svg>
                                @((MarkupString)(requirement))
                            </li>
                        }
                    </ul>
                }
                @if (!String.IsNullOrEmpty(Project.RequirementsConclusion))
                {
                    <p>@((MarkupString)(Project.RequirementsConclusion))</p>
                }
            </div>
        </div>
    }

    @if (Project.LearningItems != null)
    {
        <div class="row pb-5">
            <div class="col-lg-2 d-flex align-items-center justify-content-center">
                <div class="d-none d-sm-block">
                    <img src="img/books.png" width="70" alt="" class="align-middle">
                </div>
            </div>
            <div class="col-lg-10 col-sm-12">
                <div class="d-flex justify-content-center">
                    <h1 class="article-section-title">@Project.LanguageHeadings.Learn</h1>
                </div>
                <p>@((MarkupString)(Project.LearningIntro))</p>
                <ol class="list-group  list-group-numbered list-group-flush">
                    @foreach (var item in Project.LearningItems)
                    {
                        <li>@((MarkupString)(item))</li>
                    }
                </ol>

            </div>
        </div>
    }

    @if (Project.Resources != null)
    {
        <div class="row pb-5">
            <div class="col-lg-2 d-flex align-items-center justify-content-center">
                <div class="d-none d-sm-block">
                    <img src="img/books.png" width="70" alt="" class="align-middle">
                </div>
            </div>
            <div class="col-sm-12 col-lg-10">
                <div class="d-flex justify-content-center">
                    <h1 class="article-section-title">@Project.LanguageHeadings.Resources</h1>
                </div>
                @if (!String.IsNullOrEmpty(Project.ResourcesIntro))
                {
                    <p>@((MarkupString)(Project.ResourcesIntro))</p>
                }
                <ul class="list-group  list-group-flush">
                    @foreach (var resource in Project.Resources)
                    {
                        <li class="list-group-item">
                            <svg class="bi" width="24" height="24" fill="blue">
                                <use xlink:href="/bootstrap-icons/bootstrap-icons.svg#link-45deg" />
                            </svg>
                            @((MarkupString)(resource))
                        </li>
                    }
                </ul>
                @if (!String.IsNullOrEmpty(Project.ResourcesConclusion))
                {
                    <p>@((MarkupString)(Project.ResourcesConclusion))</p>
                }
            </div>
        </div>
    }

    @if (Project.Tips != null)
    {
        <div class="row pb-5">
            <div class="col-lg-2 d-flex align-items-center justify-content-center">
                <div class="d-none d-sm-block">
                    <img src="img/icons8-tips-512.png" width="70" alt="" class="align-middle">
                </div>
            </div>
            <div class="col-lg-10 col-sm-12">
                <div class="d-flex justify-content-center">
                    <h1 class="article-section-title">@Project.LanguageHeadings.Tips</h1>
                </div>
                <ul class="list-group  list-group-flush">
                    @foreach (var tip in Project.Tips)
                    {
                        <li class="list-group-item">
                            <svg class="bi" width="24" height="24" fill="orange">
                                <use xlink:href="/bootstrap-icons/bootstrap-icons.svg#lightbulb-fill" />
                            </svg>
                            @((MarkupString)(tip))
                        </li>
                    }
                </ul>
            </div>
        </div>
    }

    @if (Project.Challenges != null)
    {
        <div class="row pb-5">
             <div class="col-lg-2 d-flex align-items-center justify-content-center">
                <div class="d-none d-sm-block">
                    <img src="img/icons8-product-512.png" width="70" alt="" class="align-middle">
                </div>
            </div>
            <div class=col-lg-10>
                <div class="d-flex justify-content-center">
                    <h1 class="article-section-title">@Project.LanguageHeadings.Challenges</h1>
                </div>
                <ul class="list-group  list-group-flush">
                    @foreach (var challenge in Project.Challenges)
                    {
                        <li class="list-group-item">
                            <svg class="bi" width="24" height="24" fill="red">
                                <use xlink:href="/bootstrap-icons/bootstrap-icons.svg#check-circle" />
                            </svg>
                            @((MarkupString)(challenge))
                        </li>
                    }
                </ul>
            </div>
        </div>
    }

    @if (Project.Blocks != null)
    {
        @foreach (var block in Project.Blocks)
        {
            <div class="row pb-5">
                    <div class="col-lg-2 d-flex align-items-center justify-content-center">
                        <div class="d-none d-sm-block">
                            @if (!String.IsNullOrEmpty(block.ImgUrl))
                            {
                                <img src="img/@block.ImgUrl" width="70" alt="" class="align-middle">
                            }
                        </div>
                    </div>
                <div class="@(!String.IsNullOrEmpty(block.ImgUrl) ? "col-lg-10" : "col")">
                    <div class="d-flex justify-content-center">
                        <h1 class="article-section-title">@block.Title</h1>
                    </div>

                    @foreach (var paragraph in block.Paragraphs)
                    {
                        if (paragraph.IsPicture)
                        {
                            <div class="d-flex justify-content-center pb-4">
                                <img src="img/@paragraph.PictureUrl" class="img-fluid">
                            </div>
                        }

                        if (paragraph.IsVideo)
                        {
                            <div class="video-paragraph d-flex justify-content-center embed-responsive embed-responsive-16by9">
                                <iframe class="embed-responsive-item" src="@paragraph.VideoUrl" width="500" height="350" allowfullscreen></iframe>
                            </div>
                        }

                        if (!String.IsNullOrEmpty(paragraph.Body))
                        {
                            <p>@((MarkupString) (paragraph.Body))</p>
                        }
                    }
                </div>
            </div>
        }
    }

    @if (Project.Screenshots != null)
    {
        <div class="row pb-5">
            <div class="col-2 icon-div">
                <img src="img/icons8-photo-gallery-64.png" width="70" alt="" class="align-middle">
            </div>
            <div class=col-10>
                <div class="row">
                    <h1>Example Screenshots</h1>
                    @foreach (var screenshot in Project.Screenshots)
                    {
                        <div class="col-4 pt-3">
                            <a href="img/@screenshot" target="_blank">
                                <img src="img/@screenshot" width="100" />
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (IsLoggedIn)
    {
        @if (IsLoggedIn && Project.Area == Area.SQL && !IsCompleted)
        {
            <div class="row pb-5">
                <div class="col-2 icon-div">
                    <img src="img/icons8-checklist-512.png" width="70" alt="" class="align-middle">
                </div>
                <div class=col-10>
                    <h1 class="article-section-title">Your Progress</h1>
                    @if (codeWarsNotFoundShowing)
                    {
                        <CloseButtonSVG OnClickCallback="@ToggleCodeWarsNotFoundShowing" />
                        <div class="horizontal-card bg-danger">
                            <div class="card-body bg-danger">
                                @ResultMessage
                            </div>
                        </div>
                    }
                    else
                    {
                        <ul class="list-group  list-group-flush">
                            @foreach (var challenge in Project.CodeWarsChallenges)
                            {
                                <li class="list-group-item">
                                    @if (!challenge.IsCompleted)
                                    {
                                        <svg class="bi" width="24" height="24">
                                            <use xlink:href="/bootstrap-icons/bootstrap-icons.svg#app" />
                                        </svg>
                                        <span class="ps-2">@challenge.Name</span>
                                    }
                                    else
                                    {
                                        <svg class="bi" width="24" height="24" fill="green">
                                            <use xlink:href="/bootstrap-icons/bootstrap-icons.svg#check-circle" />
                                        </svg>
                                        <span class="ps-2"><del>@challenge.Name</del></span>
                                    }

                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="card">
            <div class="card-body">
                Log in to mark this article as read and save your progress.
            </div>
        </div>
    }
</div>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private ICodeWarsService CodeWarsService { get; set; }

    [Parameter] public string ProjectSlug { get; set; }
    [Parameter] public int ProjectId { get; set; }

    private Language SelectedLanguage { get; set; } = Language.English;
    private Project Project { get; set; }
    private List<Language> AvailableLanguages { get; set; } = new();

    private bool IsLoggedIn;
    private bool IsPendingReview { get; set; } = false;
    private bool IsCompleted { get; set; } = false;
    private bool codeWarsNotFoundShowing = false;

    private string BackgroundImage;
    private string UserId;
    private string ResultMessage = "";

    protected async override Task OnInitializedAsync()
    {
        Project = SelectedLanguage switch
        {
            Language.English => ProjectHelper.GetProjects().Single(x => x.Id == ProjectId),
            Language.Portuguese => ProjectHelper.GetProjectsInPortuguese()?.Single(x => x.Id == ProjectId),
            Language.Dutch => ProjectHelper.GetProjectsInDutch()?.Single(x => x.Id == ProjectId),
            Language.Turkish => ProjectHelper.GetProjectsInDutch()?.Single(x => x.Id == ProjectId),
            Language.Korean => ProjectHelper.GetProjectsInDutch()?.Single(x => x.Id == ProjectId),
            Language.Croatian => ProjectHelper.GetProjectsInCroatian()?.Single(x => x.Id == ProjectId),
            Language.Russian => ProjectHelper.GetProjectsInRussian().Single(x => x.Id == ProjectId),
            Language.TradicionalChinese => ProjectHelper.GetProjectsInTraditionalChinese()?.Single(x => x.Id == ProjectId),
            Language.Polish => ProjectHelper.GetProjectsInPolish().Single(x => x.Id == ProjectId)
        };

        GetAvailableLanguages();

        BackgroundImage = Project.BannerUrl != "" ? Project.BannerUrl : "article-banner.jpg";

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        }

        IsCompleted = await ProjectService.IsProjectCompleted(UserId, ProjectId);


        if (!IsCompleted && Project.Area == Area.SQL)
        {
            await CheckCodeWars();
        }
    }

    private async Task CheckCodeWars()
    {
        try
        {
            var user = await UserService.GetUserById(UserId);

            var challengesResult = await CodeWarsService.GetCodeWarsCompletedChallenges(user.CodeWarsUsername, Project.CodeWarsChallenges);

            Project.CodeWarsChallenges = challengesResult.Challenges;

            if (challengesResult.Status == Models.Responses.ResponseStatus.Fail)
            {
                codeWarsNotFoundShowing = true;
                ResultMessage = challengesResult.Message;
            }

            if (challengesResult.Status == Models.Responses.ResponseStatus.Success
                && !IsCompleted
                && !Project.CodeWarsChallenges.Any(x => x.IsCompleted == false))
            {
                await CodeWarsService.MarkCodeWarsAsCompleted(Project.Id, user.Id, user.ExperiencePoints);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void GetAvailableLanguages()
    {
        AvailableLanguages.Add(Language.English);

        var languagesToCheck = new Dictionary<Func<IEnumerable<Project>?>, Language>
        {
            { () => ProjectHelper.GetProjectsInPortuguese(), Language.Portuguese },
            { () => ProjectHelper.GetProjectsInDutch(), Language.Dutch },
            { () => ProjectHelper.GetProjectsInTurkish(), Language.Turkish },
            { () => ProjectHelper.GetProjectsInKorean(), Language.Korean },
            { () => ProjectHelper.GetProjectsInCroatian(), Language.Croatian },
            { () => ProjectHelper.GetProjectsInRussian(), Language.Russian },
            { () => ProjectHelper.GetProjectsInTraditionalChinese(), Language.TradicionalChinese },
            { () => ProjectHelper.GetProjectsInPolish(), Language.Polish }
        };

        foreach (var pair in languagesToCheck)
        {
            var languageProjects = pair.Key()?.FirstOrDefault(x => x.Id == ProjectId);
            if (languageProjects != null)
            {
                AvailableLanguages.Add(pair.Value);
            }
        }
    }

    private void ChangeLanguage(ChangeEventArgs e)
    {
        string selectedLanguage = e.Value.ToString();

        Language selectedLanguageEnum = Enum.Parse<Language>(selectedLanguage);

        SelectedLanguage = selectedLanguageEnum;

        Project = SelectedLanguage switch
        {
            Language.English => ProjectHelper.GetProjects().Single(x => x.Id == ProjectId),
            Language.Portuguese => ProjectHelper.GetProjectsInPortuguese()?.Single(x => x.Id == ProjectId),
            Language.Dutch => ProjectHelper.GetProjectsInDutch()?.Single(x => x.Id == ProjectId),
            Language.Turkish => ProjectHelper.GetProjectsInTurkish()?.Single(x => x.Id == ProjectId),
            Language.Korean => ProjectHelper.GetProjectsInKorean()?.Single(x => x.Id == ProjectId),
            Language.Croatian => ProjectHelper.GetProjectsInCroatian()?.Single(x => x.Id == ProjectId),
            Language.Russian => ProjectHelper.GetProjectsInRussian()?.Single(x => x.Id == ProjectId),
            Language.TradicionalChinese => ProjectHelper.GetProjectsInTraditionalChinese()?.Single(x => x.Id == ProjectId),
            Language.Polish => ProjectHelper.GetProjectsInPolish()?.Single(x => x.Id == ProjectId),
        };

        StateHasChanged();
    }

    private void ToggleCodeWarsNotFoundShowing() => codeWarsNotFoundShowing = !codeWarsNotFoundShowing;
}

<style>
    .intro-block {
        margin-top: 20px;
    }

    .project-banner {
        background-image: url("../img/Banners/@BackgroundImage");
        background-size: cover;
        box-shadow: inset 0 0 0 2000px rgba(0, 0, 0, 0.4) !important;
    }

    .page-title {
        padding-top: 70px;
        height: 200px;
        color: white;
        font-weight: 600;
    }

    .card-completed {
        background-color: green;
        color: white;
    }

    .card-pending {
        background-color: orange;
    }
</style>