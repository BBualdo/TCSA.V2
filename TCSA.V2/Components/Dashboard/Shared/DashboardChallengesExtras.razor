@using System.Security.Claims
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Services
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

    <div class="nav-scrollable dashboard-menu pt-5 h-100">
        <nav class="flex-column">
            <div class="dashboard-menu pt-5 text-center h-100">
                <div class="row dashboard-side-card rounded">
                    <div class="col-12 dashboard-side-card-text">
                        Challenges completed
                    </div>
                    <div class="col-12 dashboard-side-card-number">
                        @ChallengeCount
                    </div>
                </div>
                <div class="row dashboard-side-card rounded">
                    <div class="col-12 dashboard-side-card-text">
                        Current Streak
                    </div>
                    <div class="col-12 dashboard-side-card-number">
                        @StreakInfo.CurrentStreak
                    </div>
                </div>
                <div class="row dashboard-side-card rounded">
                    <div class="col-12 dashboard-side-card-text">
                        Longest Streak
                    </div>
                    <div class="col-12 dashboard-side-card-number">
                        @StreakInfo.LongestStreak
                    </div>
                </div>
            </div>
        </nav>
    </div>
}

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }

    [Inject] private IChallengeService ChallengeService { get; set; }

    private int ChallengeCount { get; set; } = 0;
    private DailyStreak StreakInfo { get; set; } = new();
    private ApplicationUser user = new();

    protected override async Task OnInitializedAsync()
    {
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!AuthSate.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
        }


        var claims = AuthSate.User;
        var userId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

        if (!string.IsNullOrEmpty(userId))
        {
            StreakInfo = await ChallengeService.GetStreakInfo(userId);
            ChallengeCount = await ChallengeService.GetChallengesCount(userId);
        };
    }

    private async Task NavigateToCodeReviews()
    {
        NavigationManager.NavigateTo("/dashboard/peer-reviews");
    }
}

<style>
    .dashboard-menu {
        background-color: var(--primary-color);
    }

    .dashboard-side-card {
        padding-top: 10px;
        margin: 10px;
        color: white;
        background-color: rgba(255, 255, 255, 0.37);
    }

    .dashboard-side-card-text {
        font-weight: 600;
    }

    .dashboard-side-card-number {
        font-size: 60px;
        font-weight: 600;
    }
</style>