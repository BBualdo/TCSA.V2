@page "/dashboard"
@using TCSA.V2.Components.Dashboard.Shared
@using TCSA.V2.Components.UI
@using TCSA.V2.Components.UI.SVGs
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Services
@using System.Security.Claims;

@layout DashboardLayout
@rendermode InteractiveServer

<div class="pt-lg-5 mt-lg-2">
    @if (User != null)
    {
        if (User.DashboardProjects != null && User.DashboardProjects.Any(x => x.IsPendingNotification))
        {
            foreach (var project in CompletedPendingNotificationProjects)
            {
                <div class="card card-completed">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-10 d-flex align-items-center">@GetProjectName(project) was marked as complete!</div>
                            <div class="col-2">
                                @if (!IsLoading)
                                {
                                    <button class="btn btn-outline-light" type="button" @onclick="() => DismissIsCompleteNotification(project)">Dismiss</button>
                                }
                                else
                                {
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        <DashboardHeader Level=@User.Level
                         BeltImgUrl=@($"/img/Belts/{User.Level}-belt.png")
                         FlagUrl=@FlagHelper.GetFlag(User.Country)
                         ExperiencePoints=@User.ExperiencePoints
                         Ranking=@Ranking
                         DisplayName=@User.DisplayName />

        <div class="row">
            @if (!AlumniComplete)
            {
                <div class="col-12 mb-1 mt-1">
                <DashboardAreaCard CardName="LinkedIn"
                                   IconUrl="icons8-student-512.png"
                                   Description="<a target='_blank' href='project/86/linkedin'>Mark yourself as a student of The C# Academy on LinkedIn</a> and get 20XPs" />
                </div>

            }
            @foreach (var area in Areas)
            {
                <div class="col-lg-6 col-md-12 col-sm-12 dashboard-area-card">
                    <DashboardAreaCard CardName=@area.CardName
                                       IsComplete=@area.IsCompleted
                                       IconUrl=@area.ImgUrl
                                       Description=@area.Description
                                       Projects="@area.Projects"
                                       PendingProjects="@PendingProjects"
                                       CompleteProjects="@CompletedProjects"/>
                </div>
            }
        </div>
    }
</div>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private ILeaderboardService LeaderboardService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private ICommunityService CommunityService { get; set; }

    private ApplicationUser User;
    private string UserId;
    private bool AlumniComplete = false;
    private bool IsLoading = false;

    private int Ranking;

    private List<DashboardAreaInfo> Areas = new();
    private List<Article>? Articles;
    private IEnumerable<Project> Projects;
    private List<int>? CompletedProjects = new();
    private List<int>? PendingProjects = new();
    private List<int>? CompletedPendingNotificationProjects = new();
    private Dictionary<int, string>? CompletedPendingNotificationIssues = new();

    protected async override Task OnInitializedAsync()
    {
        Articles = ArticleHelper.GetArticles();
        Projects = ProjectHelper.GetProjects().Where(x => x.IsClosed == false);

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!AuthSate.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
        }

        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);
        CompletedProjects = User.DashboardProjects?.Where(x => x.IsCompleted).Select(x => x.ProjectId).ToList();
        PendingProjects = User.DashboardProjects?.Where(x => x.IsPendingReview).Select(x => x.ProjectId).ToList();
        CompletedPendingNotificationProjects = User.DashboardProjects?.Where(x => x.IsPendingNotification).Select(x => x.ProjectId).ToList();
        CompletedPendingNotificationIssues = await CommunityService.GetIssuesTitles(CompletedPendingNotificationProjects);

        var areaIconUrls = new List<string> { "" };

        Ranking = await LeaderboardService.GetUserRanking(UserId);

        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Start Here",
                ImgUrl = "icons8-baby-app-96.png",
                Projects = Articles.Where(x => x.Area == Area.StartHere),
                Description = GetNotCompletedMessage(Area.StartHere, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.StartHere, null),
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Beginner Console",
                ImgUrl = "icons8-mommy-and-me-classes-96.png",
                Projects = Projects.Where(x => x.Area == Area.Console && x.Difficulty == Difficulty.Beginner),
                Description = GetNotCompletedMessage(Area.Console, Difficulty.Beginner),
                IsCompleted = CheckIfAreaIsCompleted(Area.Console, Difficulty.Beginner),
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Intermediate Console",
                ImgUrl = "icons8-teenager-64.png",
                Projects = Projects.Where(x => x.Area == Area.Console && x.Difficulty == Difficulty.Intermediate),
                Description = GetNotCompletedMessage(Area.Console, Difficulty.Intermediate),
                IsCompleted = CheckIfAreaIsCompleted(Area.Console, Difficulty.Intermediate)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Advanced Console",
                ImgUrl = "icons8-executive-64.png",
                Projects = Projects.Where(x => x.Area == Area.Console && x.Difficulty == Difficulty.Advanced),
                Description = GetNotCompletedMessage(Area.Console, Difficulty.Advanced),
                IsCompleted = CheckIfAreaIsCompleted(Area.Console, Difficulty.Advanced)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Start Applying",
                ImgUrl = "icons8-permanent-job-96.png",
                Projects = Projects.Where(x => x.Area == Area.StartApplying),
                Description = GetNotCompletedMessage(Area.StartApplying, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.StartApplying, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "SQL",
                ImgUrl = "icons8-sql-server-64.png",
                Projects = Projects.Where(x => x.Area == Area.SQL),
                Description = GetNotCompletedMessage(Area.SQL, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.SQL, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "ASP.NET Core MVC",
                ImgUrl = "mvc.png",
                Projects = Projects.Where(x => x.Area == Area.MVC),
                Description = GetNotCompletedMessage(Area.MVC, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.MVC, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Auth Area",
                ImgUrl = "icons8-authentication-100.png",
                Projects = Projects.Where(x => x.Area == Area.Auth),
                Description = GetNotCompletedMessage(Area.Auth, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.Auth, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "React",
                ImgUrl = "icons8-react-80.png",
                Projects = Projects.Where(x => x.Area == Area.React),
                Description = GetNotCompletedMessage(Area.React, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.React, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Angular",
                ImgUrl = "icons8-angularjs-96.png",
                Projects = Projects.Where(x => x.Area == Area.Angular),
                Description = GetNotCompletedMessage(Area.Angular, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.Angular, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Blazor",
                ImgUrl = "blazor.png",
                Projects = Projects.Where(x => x.Area == Area.Blazor),
                Description = GetNotCompletedMessage(Area.Blazor, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.Blazor, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "MAUI",
                ImgUrl = "maui.png",
                Projects = Projects.Where(x => x.Area == Area.MAUI),
                Description = GetNotCompletedMessage(Area.MAUI, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.MAUI, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Cloud Development",
                ImgUrl = "icons8-cloud-connection-480.png",
                Projects = Projects.Where(x => x.Area == Area.Azure),
                Description = GetNotCompletedMessage(Area.Azure, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.Azure, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Challenge Projects",
                ImgUrl = "icons8-challenge-64.png",
                Projects = Projects.Where(x => x.Area == Area.MonthlyChallenge),
                Description = GetNotCompletedMessage(Area.MonthlyChallenge, null),
                IsCompleted = CheckIfAreaIsCompleted(Area.MonthlyChallenge, null)
            });

        AlumniComplete = CompletedProjects.Contains(86);
    }

    // TODO: Move this to helper and add unit test
    private bool CheckIfAreaIsCompleted(Area area, Difficulty? difficulty)
    {
        if (difficulty != null)
        {
            var ids = Projects.Where(x => x.Area == area && x.Difficulty == difficulty).Select(x => x.Id).ToList();

            foreach (int id in ids)
            {
                if (CompletedProjects != null && !CompletedProjects.Contains(id))
                {
                    return false;
                } else
                {
                    return true;
                }
            }
        }

        if (area != Area.StartHere)
        {
            var projectIds = Projects.Where(x => x.Area == area).Select(x => x.Id);

            foreach (int id in projectIds)
            {
                if (CompletedProjects != null && !CompletedProjects.Contains(id))
                {
                    return false;
                }
            }
        }
        else
        {
            var articleIds = Articles.Where(x => x.Area == Area.StartHere).Select(x => x.Id);

            foreach (int id in articleIds)
            {
                if (CompletedProjects != null && !CompletedProjects.Contains(id))
                {
                    return false;
                }
            }
        }

        return true;
    }

    private string GetNotCompletedMessage(Area? area, Difficulty? difficulty)
    {
        var count = 0;
        var completedProjects = 0;
        List<int> ids = new();

        if (area == Area.StartHere)
        {
            count = Articles.Where(x => x.Area == area).Count();
            ids = Articles.Where(x => x.Area == area).Select(x => x.Id).ToList();

            foreach (int id in ids)
            {
                if (CompletedProjects != null && CompletedProjects.Contains(id))
                {
                    completedProjects += 1;
                }
            }
        }

        else if (area == Area.SQL)
        {
            count = Projects.Where(x => x.Area == Area.SQL && !x.IsClosed).Count();
            ids = Projects.Where(x => x.Area == Area.SQL).Select(x => x.Id).ToList();

            foreach (int id in ids)
            {
                if (CompletedProjects != null && CompletedProjects.Contains(id))
                {
                    completedProjects += 1;
                }
            }
        }
        else
        {
            if (difficulty != null)
            {
                count = Projects.Where(x => x.Area == area && x.Difficulty == difficulty).Count();
                ids = Projects.Where(x => x.Area == area && x.Difficulty == difficulty).Select(x => x.Id).ToList();
            }
            else
            {
                count = Projects.Where(x => x.Area == area).Count();
                ids = Projects.Where(x => x.Area == area).Select(x => x.Id).ToList();
            }

            foreach (int id in ids)
            {
                if (CompletedProjects != null && CompletedProjects.Contains(id))
                {
                    completedProjects += 1;
                }
            }
        }

        return $"{completedProjects} out of {count} tasks completed";
    }

    private async Task DismissIsCompleteNotification(int projectId)
    {
        await ProjectService.MarkAsNotified(projectId);
        User = await UserService.GetUserById(UserId);
    }

    private string GetProjectName(int projectId)
    {
        if (Projects.Any(x => x.Id == projectId))
        {
            return Projects.FirstOrDefault(x => x.Id == projectId).Title;
        }
        else
        {
            return CompletedPendingNotificationIssues.FirstOrDefault(x => x.Key == projectId).Value;
        }
    }
}

<style>
    .dashboard-area-card {
        padding-right: 15px;
        padding-left: 15px;
    }

    .card-completed {
        background-color: green;
        color: white;
        margin-bottom: 5px;
    }
</style>