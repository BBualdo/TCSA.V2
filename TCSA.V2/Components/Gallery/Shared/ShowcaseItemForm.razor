@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Data
@using TCSA.V2.Models.DTO
@using TCSA.V2.Models.Forms
@using TCSA.V2.Services

<div class="form-group mt-2">
    <div class="row">
        <div class="col-sm-3">
            <CategoryList OnClickCallback="@GetAreaItems"
                          Areas="@Areas"
                          SelectText="Select Area"
                          IsLightMode="@IsLightMode" />
        </div>
        <div class="col-sm-3">
            @if (ProjectSelections.Any())
            {
                <select shadow rounded class="form-select" @bind="ProjectId">
                    <option disabled selected>Select Project</option>
                    @foreach (var project in ProjectSelections)
                    {
                        var currentProject = project;
                        <option value="@project.Id">@project.Area - @project.Title</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row mt-1">
        <div class="col-sm-6">
            <input @bind="VideoUrl" class="form-control"></input>
            @if (!string.IsNullOrEmpty(ValidationMessage))
            {
                <div class="text-danger mt-2">@ValidationMessage</div>
            }
        </div>
    </div>
    <div class="row mt-1">
        <div class="col">
            <button class="btn btn-success btn-academy" type="button" disabled="@IsSubmitDisabled" @onclick=SubmitProject>Submit</button>
        </div>
    </div>
</div>


@code {
    [Inject] private IGalleryService _galleryService { get; set; }
    [Parameter] public EventCallback<ShowcaseItem> OnAddNewItem { get; set; } = new();
    [Parameter] public ApplicationUser CurrentUser { get; set; } = new();
    [Parameter] public List<string> Areas { get; set; } = new();
    [Parameter] public IEnumerable<ShowcaseProjectInfo> Projects { get; set; }
    [Parameter] public bool IsLightMode { get; set; } = false;

    private readonly List<string> ProjectlessAreas = new List<string> { "StandAlone", "FullStack", "StartApplying", "Open Source", "HowItWorks", "StartHere", "SQL" };

    private string _videoUrl;
    private string VideoUrl
    {
        get => _videoUrl;
        set
        {
            _videoUrl = value;
            ValidateForm();
        }
    }

    private int _projectId;
    private int ProjectId
    {
        get => _projectId;
        set
        {
            _projectId = value;
            ValidateForm(); 
        }
    }

    private bool IsSubmitDisabled { get; set; } = true; 
    private string ValidationMessage { get; set; }

    private IEnumerable<ShowcaseProjectInfo> ProjectSelections { get; set; } = [];
    private List<string> EnumAreas = Enum.GetNames(typeof(Area)).ToList();


    protected override async Task OnInitializedAsync()
    {
        Areas = EnumAreas.Except(ProjectlessAreas).ToList();
    }

    private void GetAreaItems(string area)
    {
        if (area == "All")
        {
            ProjectSelections = [];
        }
        else
        {
            var areaEnum = Enum.Parse<Area>(area);
            ProjectSelections = Projects.Where(project => project.Area == areaEnum).ToList();
        }
    }

    private void SubmitProject()
    {
        _galleryService.AddItem(new ShowcaseItemDTO
            {
                ApplicationUserId = CurrentUser.Id,
                ProjectId = ProjectId,
                VideoUrl = VideoUrl
            });
    }

    private void ValidateForm()
    {
        bool isUrlValid = GalleryHelpers.YouTubeUrlValidator(VideoUrl);

        if (!isUrlValid)
        {
            ValidationMessage = "The URL is not a valid YouTube video link. Example of valid URL: 'https://www.youtube.com/watch?v=JJN5iZcUYtQ'";
        }
        else
        {
            ValidationMessage = string.Empty;
        }

        IsSubmitDisabled = !(ProjectId > 0 && isUrlValid);
    }
}
