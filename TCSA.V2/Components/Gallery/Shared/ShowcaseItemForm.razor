@using TCSA.V2.Models
@using TCSA.V2.Data
@using TCSA.V2.Models.DTO
@using TCSA.V2.Services

<div class="d-flex flex-wrap">
    <div class="dropup m-2">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Select Area
        </button>

        <ul class="dropdown-menu">
            @foreach (var area in Areas)
            {
                var currentArea = area;

                <li> <button type="button" @onclick="()=>SelectArea(currentArea)" class="dropdown-item btn btn-sm">@currentArea</button>  </li>
            }
        </ul>
        <p>@selectedArea</p>
    </div>

    <div class="dropup m-2">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Select Project
        </button>

        <ul class="dropdown-menu">
            @foreach (var project in ProjectSelections)
            {
                var currentProject = project;

                <li> <button type="button" @onclick="()=>SelectProject(currentProject)" class="dropdown-item btn btn-sm">@currentProject.Title</button>  </li>
            }
        </ul>
        <p>@selectedProject</p>

    </div>
    <EditForm Model="NewItem" OnValidSubmit="Submit" FormName="ShowCaseItemForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="d-flex align-items-start">
            <label class="m-1">
                Youtube Link:
            </label>
            <InputTextArea @bind-Value="NewItem!.Link" style="width:300px;height:300px" />

            <button class="m-1 btn btn-sm btn-secondary" ="submit">Submit</button>
        </div>
    </EditForm>

</div>



@code {
    [SupplyParameterFromForm] private ShowcaseItem NewItem { get; set; }
    [Parameter] public EventCallback<ShowcaseItem> OnAddNewItem { get; set; }
    [Parameter] public ApplicationUser CurrentUser { get; set; }
    [Parameter] public List<string> Areas { get; set; }
    [Parameter] public IEnumerable<ShowcaseProjectInfo> Projects { get; set; }
    [Inject] private GalleryService _galleryService { get; set; }

    private IEnumerable<ShowcaseProjectInfo> ProjectSelections { get; set; } = [];
    private ValidationMessageStore? messageStore;
    Area selectedArea { get; set; }
    ShowcaseProjectInfo selectedProject { get; set; }
    private List<string> FormAreas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NewItem ??= new();
        selectedProject ??= new();
        FormAreas = Areas.ToList();

    }


    private void SelectArea(string area)
    {
        selectedArea = Enum.Parse<Area>(area);
        ProjectSelections = Projects.Where(project => project.Area == selectedArea).ToList();
    }

    private void SelectProject(ShowcaseProjectInfo project)
    {
        selectedProject = project;
    }


    private async Task Submit()
    {
        if (selectedProject is not null)
        {
            NewItem.ProjectName = selectedProject.Title;
            NewItem.ProjectId = selectedProject.Id;
            NewItem.Area = selectedArea;
            NewItem.ApplicationUserId = CurrentUser.Id;
            NewItem.UserName = CurrentUser.FirstName;
            NewItem.UserLastName = CurrentUser.LastName;


            try
            {
                var addedItem = await _galleryService.AddItem(NewItem);
                NewItem = new();
                selectedProject = new();
                selectedArea = new();

                OnAddNewItem.InvokeAsync(addedItem);
            }
            catch
            {
                NewItem = new();
                selectedProject = new();
                selectedArea = new();
            }

        }
        return;

    }



}
