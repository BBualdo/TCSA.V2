@using TCSA.V2.Models
@using TCSA.V2.Data
@using TCSA.V2.Models.DTO
@using TCSA.V2.Models.Forms
@using TCSA.V2.Services

<div class="form-group mt-2">
    <div class="row">
        <div class="col">
            <CategoryList OnClickCallback="@GetAreaItems"
                          Areas="@Areas"
                          IsLightMode="@IsLightMode" />
        </div>
        <div class="col">
            @if (ProjectSelections.Any())
            {
                <select shadow rounded class="form-select" @bind="ProjectId">
                    <option selected>Select Project</option>
                    @foreach (var project in ProjectSelections)
                    {
                        var currentProject = project;
                        <option value="@project.Id">@project.Area - @project.Title</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            <textarea @bind="VideoUrl" class="form-control"></textarea>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-success" type="button" @onclick=SubmitProject>Submit</button>
        </div>
    </div>
</div>


@code {
    private SubmitShowCaseItemForm Model { get; set; } = new();
    private string VideoUrl { get; set; } = string.Empty;
    [Parameter] public EventCallback<ShowcaseItem> OnAddNewItem { get; set; } = new();
    [Parameter] public ApplicationUser CurrentUser { get; set; } = new();
    [Parameter] public List<string> Areas { get; set; } = new();
    [Parameter] public IEnumerable<ShowcaseProjectInfo> Projects { get; set; } 
    [Parameter] public bool IsLightMode { get; set; } = new();
    [Inject] private IGalleryService _galleryService { get; set; } 

    private List<string> EnumAreas = Enum.GetNames(typeof(Area)).ToList();
    private string ProjectSelectMenuText = "Select Project";
    private string AreaSelectMenuText = "Select Area";
    private int ProjectId = 0;
    private IEnumerable<ShowcaseProjectInfo> ProjectSelections { get; set; } = [];
    Area selectedArea { get; set; }
    ShowcaseProjectInfo selectedProject { get; set; }
    private List<string> FormAreas { get; set; }
    private List<string> ProjectlessAreas = new List<string> { "StandAlone", "FullStack", "StartApplying", "Open Source", "HowItWorks", "StartHere", "SQL" };

    protected override async Task OnInitializedAsync()
    {
        Areas = EnumAreas.Except(ProjectlessAreas).ToList();
    }

    private void GetAreaItems(string area)
    {
        if (area == "All")
        {
            ProjectSelections = [];
        }
        else
        {
            var areaEnum = Enum.Parse<Area>(area);
            ProjectSelections = Projects.Where(project => project.Area == areaEnum).ToList();
        }
    }

    private void SubmitProject()
    {
        _galleryService.AddItem(new ShowcaseItemDTO
        {
            ApplicationUserId = CurrentUser.Id,
            ProjectId = ProjectId,
            VideoUrl = VideoUrl
        });
    }
}
