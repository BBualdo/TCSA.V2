@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Data
@using TCSA.V2.Models.DTO
@using TCSA.V2.Models.Forms
@using TCSA.V2.Models.Responses
@using TCSA.V2.Services

<div class="form-group mt-2">
    <div class="row">
        <div class="col-sm-3">
                <select shadow rounded class="form-select" @bind="ProjectId">
                    <option disabled selected>Select Project</option>
                    @foreach (var project in Projects)
                    {
                        var currentProject = project;
                        <option value="@project.Id">@project.Area - @project.Title</option>
                    }
                </select>
        </div>
    </div>
    <div class="row mt-1">
        <div class="col-sm-6">
            <input @bind="VideoUrl" class="form-control"></input>
            @if (!string.IsNullOrEmpty(ValidationMessage))
            {
                <div class="text-danger mt-2">@ValidationMessage</div>
            }
        </div>
    </div>
    <div class="row mt-1">
        <div class="col">
            <button class="btn btn-success btn-academy" type="button" disabled="@IsSubmitDisabled" @onclick=SubmitProject>Submit</button>
        </div>
    </div>
</div>


@code {
    [Inject] private IGalleryService _galleryService { get; set; }
    [Parameter] public EventCallback<BaseResponse> OnAddNewItem { get; set; } = new();
    [Parameter] public ApplicationUser CurrentUser { get; set; } = new();
    [Parameter] public List<string> Areas { get; set; } = new();
    [Parameter] public IEnumerable<ShowcaseProjectInfo> Projects { get; set; }
    [Parameter] public bool IsLightMode { get; set; } = false;

    private readonly List<string> ProjectlessAreas = new List<string> { "StandAlone", "FullStack", "StartApplying", "Open Source", "HowItWorks", "StartHere", "SQL" };

    private string _videoUrl;
    private string VideoUrl
    {
        get => _videoUrl;
        set
        {
            _videoUrl = value;
            ValidateForm();
        }
    }

    private int _projectId;
    private int ProjectId
    {
        get => _projectId;
        set
        {
            _projectId = value;
            ValidateForm(); 
        }
    }

    private bool IsSubmitDisabled { get; set; } = true; 
    private string ValidationMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task SubmitProject()
    {
        var newItem = new ShowcaseItemDTO
            {
                ApplicationUserId = CurrentUser.Id,
                DashboardProjectId = CurrentUser.DashboardProjects.First(x => x.ProjectId == ProjectId).Id,
                ProjectId = ProjectId,
                VideoUrl = GalleryHelpers.GalleryVideoUrlFormatter(VideoUrl)
            };

        var response = await _galleryService.AddItem(newItem);

        await OnAddNewItem.InvokeAsync(response);

        ResetForm();
    }

    private void ResetForm()
    {
        ProjectId = 0;
        VideoUrl = string.Empty;
        ValidationMessage = string.Empty;
        IsSubmitDisabled = true;
    }

    private void ValidateForm()
    {
        if(string.IsNullOrEmpty(VideoUrl))
        {
            ValidationMessage = "Video URL can't be empty. Example of valid URL: 'https://www.youtube.com/watch?v=JJN5iZcUYtQ'";

            IsSubmitDisabled = true;
        } 
        else
        {
            bool isUrlValid = GalleryHelpers.YouTubeUrlValidator(VideoUrl);

            if (!isUrlValid)
            {
                ValidationMessage = "The URL is not a valid YouTube video link. Example of valid URL: 'https://www.youtube.com/watch?v=JJN5iZcUYtQ'";
            }
            else
            {
                ValidationMessage = string.Empty;
            }

            IsSubmitDisabled = !(ProjectId > 0 && isUrlValid);
        }
    }
}
