@page "/gallery"
@rendermode InteractiveServer
@using TCSA.V2.Components.Gallery.Shared
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Models.DTO
@using TCSA.V2.Services
@using System.Security.Claims;
@using System.Linq;
<div class="mt-5 pt-3">
    <nav class="top-menu navbar navbar-expand-lg mt-5">
        <div class="container-fluid justify-content-around">
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#GallerynavbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
              <button type="button">Add new video</button>
                            
            <div class="collapse navbar-collapse" id="GallerynavbarSupportedContent">

                <ul class="navbar-nav me-auto mb-2 mb-lg-0">

                    <CategoryList OnClickCallback="@GetAreaItems" Areas="@Areas" />

                    @if (ProjectSelections.Any())
                    {

                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="ProjectDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Select Project
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="ProjectDropdown">
                                @foreach (var project in ProjectSelections)
                                {
                                    var currentProject = project;

                                    <li> <button type="button" class="dropdown-item btn btn-sm" @onclick="()=>FilterItemsByProject(currentProject)">@currentProject.Title</button>  </li>
                                }
                            </ul>
                        </li>
                    }
                    <li>
                        <EditForm Model="@Search" OnSubmit="@ApplySearchFilter">
                            <input type="text" @bind="@searchText" placeholder="User name" aria-label="Search" />
                            <button class="btn btn-outline-success" type="submit">Search</button>
                        </EditForm>
                    </li>
                </ul>

            </div>
        </div>
    </nav>

    <AuthorizeView>
        <p>This section is authorized view for users to add new item</p>
        @if (User is not null)
        {
            <h2>@User.FirstName</h2>
            <ShowcaseItemForm CurrentUser="User" Areas="@Areas" Projects="@Projects" OnAddNewItem="@UpdateItemList" />
        }
    </AuthorizeView>

    <div class=" @(!ItemsToShow.Any()?loadingContainer :videoContainer)">
        @if (ItemsToShow.Any())
        {
            foreach (var item in ItemsToShow)
            {
                var currentItem = item;
                <ShowcaseCard Item="@currentItem" CurrentUserId="@CurrentUserId" />
            }
        }
        else
        {
            if (isLoading)
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <h2>No content...</h2>
            }

        }
    </div>
</div>


@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private GalleryService _galleryService { get; set; }

    private List<string> ProjectlessAreas = new List<string> { "StandAlone", "FullStack", "StartApplying", "Open Source", "HowItWorks", "StartHere", "SQL" };
    private List<string> EnumAreas = Enum.GetNames(typeof(Area)).ToList();
    private List<string> Areas { get; set; }
    private ApplicationUser User;
    private string UserId;
    private IEnumerable<ShowcaseProjectInfo> Projects { get; set; }
    private IEnumerable<ShowcaseProjectInfo> ProjectSelections { get; set; } = [];
    private IEnumerable<ShowcaseItem> AllItems { get; set; } = [];
    private List<ShowcaseItem> ItemsToShow { get; set; } = [];
    private bool isLoading = true;
    private string CurrentUserId = "none";
    private string loadingContainer = "container text-center";
    private string videoContainer = "d-flex justify-content-center flex-wrap mt-5";
    private string searchText = string.Empty;
    private object Search = new() { };

    protected async override Task OnInitializedAsync()
    {
        Areas = EnumAreas.Except(ProjectlessAreas).ToList(); //Get areas which has projects

        //Get active user if authenticated
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        if (User is not null)
        {
            CurrentUserId = User.Id;
        }

        //Get Short Project infos
        Projects = ProjectHelper.GetProjectInfos().AsQueryable();

        AllItems = await _galleryService.GetItems();
        ItemsToShow = AllItems.ToList();
        isLoading = false;
    }

    private async Task GetAreaItems(string area)
    {
        if (area == "All")
        {
            ProjectSelections = [];
            ItemsToShow = AllItems.ToList();
        }
        else
        {
            var areaEnum = Enum.Parse<Area>(area);
            ProjectSelections = Projects.Where(project => project.Area == areaEnum).ToList();
            ItemsToShow = AllItems.Where(project => project.Area == areaEnum).ToList();
        }
    }

    private async Task UpdateItemList(ShowcaseItem addedItem)
    {
        AllItems = AllItems.Append(addedItem);
        ItemsToShow = AllItems.ToList();
    }

    private async Task FilterItemsByProject(ShowcaseProjectInfo project)
    {
        ItemsToShow = AllItems.Where(i => i.ProjectId == project.Id).ToList();
    }

    private async Task ApplySearchFilter()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            ItemsToShow = AllItems.ToList();
            ProjectSelections = [];
            return;
        }
        ItemsToShow = AllItems.Where(i => i.UserName.Contains(searchText)).ToList();

    }



}
