@page "/gallery"
@rendermode InteractiveServer
@using TCSA.V2.Components.Gallery.Shared
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Models.DTO
@using TCSA.V2.Services
@using System.Security.Claims;
@using System.Linq;

<div class="row m-5 m-lg-2 p-1">
    <div class="col-12 col-lg-3 col-xl-2 mb-2 mb-lg-0">
        <CategoryList OnClickCallback="@GetAreaItems" Areas="@Areas"></CategoryList>
    </div>

    @if (ProjectSelections.Any())
    {
        <div class="dropup mt-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select Project
            </button>

            <ul class="dropdown-menu">
                @foreach (var project in ProjectSelections)
                {
                    var currentProject = project;

                    <li> <button type="button" class="dropdown-item btn btn-sm">@currentProject.Title</button>  </li>
                }
            </ul>
        </div>
    }
</div>

<div class="col-12 col-lg-9 col-xl-10 ">
    @if (AllItems.Any())
    {
        foreach(var item in AllItems)
        {
            <p>@item.ProjectName</p>
        }
    } else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
   

</div>

<AuthorizeView>
    <p>This section is authorized view for users to add new item</p>
    @if (User is not null)
    {
        <h2>@User.Id</h2>
        <ShowcaseItemForm CurrentUser="User" Areas="@Areas" Projects="@Projects" OnAddNewItem="@UpdateItemList"/>
    }
</AuthorizeView>


@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private GalleryService _galleryService {get;set;}

    private List<string> ProjectlessAreas = new List<string> { "StandAlone", "FullStack", "StartApplying", "Open Source", "HowItWorks", "StartHere", "SQL" };
    private List<string> EnumAreas = Enum.GetNames(typeof(Area)).ToList();
    private List<string> Areas { get; set; }
    private ApplicationUser User;
    private string UserId;
    private IEnumerable<ShowcaseProjectInfo> Projects { get; set; }
    private IEnumerable<ShowcaseProjectInfo> ProjectSelections { get; set; } = [];
    private IEnumerable<ShowcaseItem> AllItems { get; set; } = [];
    private List<ShowcaseItem> ItemsToShow { get; set; } = [];


    protected async override Task OnInitializedAsync()
    {
        Areas = EnumAreas.Except(ProjectlessAreas).ToList(); //Get areas which has projects

        //Get active user if authenticated
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        //Get Short Project infos
        Projects = ProjectHelper.GetProjectInfos().AsQueryable();

        AllItems = await _galleryService.GetItems();
    }

    private async Task GetAreaItems(string area)
    {
        if (area == "All")
        {
            ProjectSelections = [];
        }
        else
        {
            var areaEnum = Enum.Parse<Area>(area);
            ProjectSelections = Projects.Where(project => project.Area == areaEnum).ToList();
            ItemsToShow = AllItems.Where(project => project.Area == areaEnum).ToList();
        }
    }

    private async Task UpdateItemList(ShowcaseItem addedItem)
    {
       AllItems=AllItems.Append(addedItem);
    }

}
