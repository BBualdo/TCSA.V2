@page "/gallery/{IsLightMode:bool}"
@rendermode InteractiveServer
@using TCSA.V2.Components.Gallery.Shared
@using TCSA.V2.Components.UI.SVGs
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Models.DTO
@using TCSA.V2.Services
@using System.Security.Claims;
@using System.Linq;

<div class="container mt-5 pt-3">
    <div class="row">
        <div class="col-sm-2">
            <AuthorizeView>
                <button class="btn btn-outline-success d-none d-md-inline-block" @onclick="ToggleAddForm" type="button">Add Project</button>
            </AuthorizeView>
        </div>
        <div class="col">
            <CategoryList OnClickCallback="@GetAreaItems" 
                Areas="@Areas" 
                IsLightMode="@IsLightMode" />
        </div>
        <div class="col">
            @if (ProjectSelections.Any()) {
                <select shadow rounded class="form-select" @onchange="HandleProjectSelection">
                    <option selected>Select Project</option>
                    @foreach (var project in ProjectSelections)
                    {
                        var currentProject = project;
                        <option value="@project.Id">@project.Area - @project.Title</option>
                    }
                </select>
            }
        </div>
        <div class="col">
            <EditForm Model="@Search" OnSubmit="@ApplySearchFilter">
                <input type="text" class="form-control" @bind="@searchText" placeholder="User name" aria-label="Search" />
                <button class="btn btn-outline-success" type="submit">Search</button>
            </EditForm>
        </div>
    </div>

    <AuthorizeView>
        @if (User is not null && isFormOpen)
        {
            <div class="d-flex row flex-wrap">
                <ShowcaseItemForm 
                    CurrentUser="User" 
                    Areas="@Areas" 
                    Projects="@Projects" 
                    IsLightMode=@IsLightMode />

            </div>
        }
    </AuthorizeView>

    <div class=" @(!ItemsToShow.Any()?loadingContainer :videoContainer)">
        @if (ItemsToShow.Any())
        {
            foreach (var item in ItemsToShow)
            {
                var currentItem = item;
                <ShowcaseCard 
                    Item="@currentItem" 
                    CurrentUserId="@CurrentUserId"  />
            }
        }
        else
        {
            if (isLoading)
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <h2>No content...</h2>
            }
        }
    </div>
</div>


@code {
    [Parameter]
    public bool IsLightMode { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IGalleryService _galleryService { get; set; }

    private List<string> ProjectlessAreas = new List<string> { "StandAlone", "FullStack", "StartApplying", "Open Source", "HowItWorks", "StartHere", "SQL" };
    private List<string> EnumAreas = Enum.GetNames(typeof(Area)).ToList();
    private List<string> Areas { get; set; }
    private ApplicationUser User;
    private string UserId;
    private IEnumerable<ShowcaseProjectInfo> Projects { get; set; }
    private IEnumerable<ShowcaseProjectInfo> ProjectSelections { get; set; } = [];
    private IEnumerable<ShowcaseItem> AllItems { get; set; } = [];
    private List<ShowcaseItemDTO> ItemsToShow { get; set; } = [];
    private List<ShowcaseItemDTO> ItemsToShowCache { get; set; } = [];
    private bool isLoading = true;
    private string CurrentUserId = "none";
    private string loadingContainer = "container text-center";
    private string videoContainer = "d-flex justify-content-center flex-wrap mt-5";
    private string searchText = string.Empty;
    private object Search = new() { };
    private bool isFormOpen;

    protected async override Task OnInitializedAsync()
    {
        Areas = EnumAreas.Except(ProjectlessAreas).ToList();

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        if (User is not null)
        {
            CurrentUserId = User.Id;
        }

        Projects = ProjectHelper.GetProjectInfos().AsQueryable();

        AllItems = await _galleryService.GetItems();
        ItemsToShow = AllItems.Select(x => new ShowcaseItemDTO
        {
            ApplicationUserId = x.AppUserId.ToString(),
            ProjectId = x.ProjectId,
            UserFirstName = x.ApplicationUser.FirstName,
            UserLastName = x.ApplicationUser.LastName,
            Area = Projects.First(y => y.Id == x.ProjectId).Area,
            ProjectName = Projects.First(y => y.Id == x.ProjectId).Title

        }).ToList();
        ItemsToShowCache = ItemsToShow;
        isLoading = false;
    }

    private void GetAreaItems(string area)
    {
        ItemsToShow = ItemsToShowCache;
        if (area == "All")
        {
            ProjectSelections = [];
            ItemsToShow = ItemsToShow;
        }
        else
        {
            var areaEnum = Enum.Parse<Area>(area);
            ProjectSelections = Projects.Where(project => project.Area == areaEnum).ToList();
            ItemsToShow = ItemsToShow.Where(project => project.Area == areaEnum).ToList();
        }
    }

    private void FilterItemsByProject(ShowcaseProjectInfo project)
    {
        ItemsToShow = ItemsToShowCache;
        ItemsToShow = ItemsToShow.Where(i => i.ProjectId == project.Id).ToList();
    }

    private async Task ApplySearchFilter()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            ItemsToShow = AllItems.Select(x => new ShowcaseItemDTO
                {
                    ApplicationUserId = x.AppUserId.ToString()
                }).ToList();
            ProjectSelections = [];
            return;
        }
        ItemsToShow = ItemsToShow.Where(i => i.UserFirstName.Contains(searchText) || i.UserLastName.Contains(searchText)).ToList();
    }

    private async Task ToggleAddForm()
    {
        isFormOpen = !isFormOpen;
    }

    private async Task HandleDelete(ShowcaseItem itemToDelete)
    {
        try
        {
            await _galleryService.DeleteItem(itemToDelete);
            AllItems = AllItems.Where(i => i != itemToDelete);
            ItemsToShow = AllItems.Select(x => new ShowcaseItemDTO
                {
                    ApplicationUserId = x.AppUserId.ToString()
                }).ToList();
        }
        catch
        {
            return;
        }
    }


    private async Task HandleProjectSelection(ChangeEventArgs e)
    {
        int selectedProject = int.Parse(e.Value.ToString());
        ItemsToShow = ItemsToShowCache;
        ItemsToShow = ItemsToShow.Where(i => i.ProjectId == selectedProject).ToList();
        
    }

    // private async Task HandleGoldenChange(ShowcaseItem updateItem)
    // {
    //     try
    //     {
    //         await _galleryService.UpdateItem(updateItem);
    //     }
    //     catch
    //     {
    //         return;
    //     }
    // }
}
